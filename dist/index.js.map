{"version":3,"sources":["../src/utils.ts","../src/api.ts","../src/client.ts","../src/types.ts"],"names":["ModelID"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Utility functions for Obrew API\r\n * @module utils\r\n */\r\n\r\nimport { I_ConnectionConfig, I_Connection } from './types'\r\n\r\n// Chat events\r\nexport const SSE_DATA_PREFIX = 'data:'\r\nexport const SSE_EVENT_PREFIX = 'event:'\r\nexport const SSE_COMMENT_PREFIX = ':'\r\n\r\n/**\r\n * Default port for Obrew API\r\n */\r\nexport const defaultPort = '8008'\r\n/**\r\n * Default domain for Obrew API\r\n * @TODO We need a method to tell whether the app is currently running locally (dev-mode) or hosted on server (web).\r\n */\r\nexport const defaultDomain = 'http://localhost'\r\nexport const DEFAULT_OBREW_CONFIG: I_ConnectionConfig = {\r\n  domain: defaultDomain,\r\n  port: defaultPort,\r\n  version: 'v1',\r\n  enabled: false, // Disabled by default until connected\r\n}\r\nexport const DEFAULT_OBREW_CONNECTION: I_Connection = {\r\n  config: DEFAULT_OBREW_CONFIG,\r\n  api: null,\r\n}\r\n\r\n/**\r\n * Create a fully qualified domain name from stored connection settings\r\n * @returns The complete origin URL (e.g., \"http://localhost:8008\")\r\n */\r\nexport const createDomainName = (config: I_ConnectionConfig): string => {\r\n  const { port, domain } = config\r\n  const PORT = port || defaultPort\r\n  const DOMAIN = domain === '0.0.0.0' ? defaultDomain : domain || defaultDomain\r\n  const origin = `${DOMAIN}:${PORT}`\r\n  return origin\r\n}\r\n","/**\r\n * Core API client for Obrew backend services\r\n * @module api\r\n */\r\n\r\nimport { createDomainName } from './utils'\r\nimport type {\r\n  I_API,\r\n  I_ConnectResponse,\r\n  I_ServicesResponse,\r\n  I_ServiceApis,\r\n  I_GenericAPIRequestParams,\r\n  T_GenericReqPayload,\r\n  T_APIConfigOptions,\r\n  I_ConnectionConfig,\r\n} from './types'\r\n\r\n/**\r\n * Connect to the Obrew backend server\r\n * @returns A promise that resolves with connection info or null on failure\r\n */\r\nexport const connect = async ({\r\n  config,\r\n  signal,\r\n}: {\r\n  config: I_ConnectionConfig\r\n  signal?: AbortSignal\r\n}): Promise<I_ConnectResponse | null> => {\r\n  const options = {\r\n    ...(signal && { signal }),\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }\r\n\r\n  try {\r\n    const origin = createDomainName(config)\r\n    const res = await fetch(`${origin}/${config.version}/connect`, options)\r\n    if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`)\r\n    if (!res) throw new Error('No response received.')\r\n    return res.json()\r\n  } catch (err) {\r\n    console.error('[obrew] connectToServer error:', err)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Create service API clients from backend configuration\r\n * @param response - The API configuration from the backend\r\n * @returns Service API clients or null if configuration is invalid\r\n */\r\nexport const createServices = (\r\n  config: I_ConnectionConfig,\r\n  response: I_API[] | null\r\n): I_ServiceApis | null => {\r\n  if (!response || response.length === 0) return null\r\n\r\n  const serviceApis = {} as I_ServiceApis\r\n\r\n  // Construct api funcs for each service\r\n  response.forEach(api => {\r\n    const origin = createDomainName(config)\r\n    const apiName = api.name\r\n    const endpoints: {\r\n      [key: string]: (args: any) => Promise<Response | null>\r\n    } & {\r\n      configs?: T_APIConfigOptions\r\n    } = {}\r\n    let res: Response\r\n\r\n    // Parse endpoint urls\r\n    api.endpoints.forEach(endpoint => {\r\n      // Create a curried fetch function\r\n      const request = async (\r\n        args: I_GenericAPIRequestParams<T_GenericReqPayload>\r\n      ) => {\r\n        try {\r\n          const contentType = { 'Content-Type': 'application/json' }\r\n          const method = endpoint.method\r\n          const headers = {\r\n            ...(method === 'POST' && !args?.formData && contentType),\r\n          }\r\n          const body = args?.formData\r\n            ? args.formData\r\n            : JSON.stringify(args?.body)\r\n          const signal = args?.signal\r\n          const queryParams = args?.queryParams\r\n            ? new URLSearchParams(args?.queryParams).toString()\r\n            : null\r\n          const queryUrl = queryParams ? `?${queryParams}` : ''\r\n          const url = `${origin}${endpoint.urlPath}${queryUrl}`\r\n\r\n          res = await fetch(url, {\r\n            method,\r\n            mode: 'cors', // no-cors, *, cors, same-origin\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers, // { 'Content-Type': 'multipart/form-data' }, // Browser will set this automatically for us for \"formData\"\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n            ...(method !== 'GET' && method !== 'HEAD' && { body }),\r\n            ...(signal && { signal }),\r\n          })\r\n\r\n          // Check no response\r\n          if (!res)\r\n            throw new Error(`No response for endpoint ${endpoint.name}.`)\r\n\r\n          // Check bad request\r\n          if (!res?.ok) {\r\n            // Try to get error details from response body\r\n            let errorDetail = res?.statusText\r\n            try {\r\n              const errorBody = await res.json()\r\n              if (errorBody?.detail) {\r\n                errorDetail =\r\n                  typeof errorBody.detail === 'string'\r\n                    ? errorBody.detail\r\n                    : JSON.stringify(errorBody.detail)\r\n              } else if (errorBody?.message) {\r\n                errorDetail = errorBody.message\r\n              }\r\n            } catch {\r\n              // If JSON parsing fails, keep statusText\r\n            }\r\n            throw new Error(`Something went wrong. ${errorDetail}`)\r\n          }\r\n\r\n          // Check json response\r\n          const responseType = res.headers.get('content-type')\r\n          if (res.json && !responseType?.includes('event-stream')) {\r\n            const result = await res.json()\r\n\r\n            if (!result) throw new Error('Something went wrong')\r\n            // Check failure from obrew api\r\n            if (typeof result?.success === 'boolean' && !result?.success)\r\n              throw new Error(\r\n                `An unexpected error occurred for [${\r\n                  endpoint.name\r\n                }] endpoint: ${result?.message ?? result?.detail}`\r\n              )\r\n            // Success\r\n            return result\r\n          }\r\n          // Return raw response (for streaming)\r\n          return res\r\n        } catch (err) {\r\n          console.error(`[obrew] Endpoint \"${endpoint.name}\":`, err)\r\n          return { success: false, message: err }\r\n        }\r\n      }\r\n\r\n      // Add request function for this endpoint\r\n      endpoints[endpoint.name] = request\r\n      // Set api configs\r\n      endpoints.configs = api.configs || {}\r\n    })\r\n    // Set api callbacks\r\n    serviceApis[apiName] = endpoints\r\n  })\r\n\r\n  return serviceApis\r\n}\r\n\r\n/**\r\n * Get the API configuration from the backend\r\n * @returns A promise that resolves with the API array or null on failure\r\n */\r\nexport const fetchAPIConfig = async (\r\n  config: I_ConnectionConfig\r\n): Promise<I_API[] | null> => {\r\n  const options = {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }\r\n\r\n  try {\r\n    const endpoint = `/${config.version}/services/api`\r\n    const url = createDomainName(config)\r\n    const res = await fetch(`${url}${endpoint}`, options)\r\n    if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`)\r\n    if (!res) throw new Error(`No response from ${endpoint}`)\r\n    const result: I_ServicesResponse = await res.json()\r\n    const success = result?.success\r\n    if (!success) return null\r\n    const apis = result.data\r\n    return apis\r\n  } catch (err) {\r\n    console.error('[obrew] fetchAPIConfig error:', err)\r\n    return null\r\n  }\r\n}\r\n","import { createServices, fetchAPIConfig, connect as apiConnect } from './api'\r\nimport {\r\n  I_Connection,\r\n  I_ConnectionConfig,\r\n  Message,\r\n  I_InferenceGenerateOptions,\r\n  I_HardwareInfo,\r\n  I_Text_Settings,\r\n  T_InstalledTextModel,\r\n} from './types'\r\nimport {\r\n  DEFAULT_OBREW_CONNECTION,\r\n  SSE_COMMENT_PREFIX,\r\n  SSE_DATA_PREFIX,\r\n  SSE_EVENT_PREFIX,\r\n} from './utils'\r\n\r\nconst LOG_PREFIX = '[obrew-client]'\r\n\r\n/**\r\n * ObrewClient responsibilities:\r\n * 1. Handle connections and server config (track host/port in mem)\r\n * 2. Provide wrapper functions around obrew api\r\n * 3. Handle teardown/cleanup of network calls, etc when client unmounts/disconnects\r\n */\r\nclass ObrewClient {\r\n  private hasConnected = false\r\n  private abortController: AbortController | null = null\r\n  private connection: I_Connection = DEFAULT_OBREW_CONNECTION\r\n\r\n  // Data Methods //\r\n\r\n  /**\r\n   * Check if service is connected\r\n   */\r\n  isConnected(): boolean {\r\n    return (\r\n      this.hasConnected &&\r\n      !!this.connection.api &&\r\n      this.connection.config.enabled\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Return the current connection\r\n   */\r\n  getConnection(): I_Connection {\r\n    return this.connection\r\n  }\r\n\r\n  // Connection Methods //\r\n\r\n  /**\r\n   * Initialize connection to Obrew backend.\r\n   */\r\n  async connect({\r\n    config,\r\n    signal,\r\n  }: {\r\n    config: I_ConnectionConfig\r\n    signal?: AbortSignal\r\n  }): Promise<boolean> {\r\n    if (this.hasConnected) {\r\n      console.log(`${LOG_PREFIX} Connection is already active!`)\r\n      return false\r\n    }\r\n    try {\r\n      // Attempt handshake connection\r\n      const connSuccess = await apiConnect({\r\n        config,\r\n        ...(signal && { signal }),\r\n      })\r\n      if (!connSuccess?.success) throw new Error(connSuccess?.message)\r\n      // Get API configuration and create services\r\n      const apiConfig = await fetchAPIConfig(config)\r\n      if (!apiConfig) throw new Error('No api returned.')\r\n      const serviceApis = createServices(config, apiConfig)\r\n      // Success\r\n      if (serviceApis) {\r\n        this.hasConnected = true\r\n        // Store config in connection after successful connect\r\n        const enabledConfig = { ...config, enabled: true }\r\n        this.connection = { config: enabledConfig, api: serviceApis }\r\n        console.log(\r\n          `${LOG_PREFIX} Successfully connected to Obrew API\\n${config}`\r\n        )\r\n        return true\r\n      }\r\n      // Failed\r\n      return false\r\n    } catch (error) {\r\n      console.error(`${LOG_PREFIX} Failed to connect to Obrew: ${error}`)\r\n      this.hasConnected = false\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ping server to check if it's responsive.\r\n   * Used for server discovery and health checks.\r\n   */\r\n  async ping(timeout = 5000): Promise<{\r\n    success: boolean\r\n    responseTime?: number\r\n    error?: string\r\n  }> {\r\n    // const {domain: url, port} = this.connection.config\r\n    // const endpointHealth = `${url}:${port}/api/health`\r\n    const controller = new AbortController()\r\n    const timeoutId = setTimeout(() => controller.abort(), timeout)\r\n    const startTime = performance.now()\r\n\r\n    try {\r\n      const connSuccess = await apiConnect({\r\n        config: this.connection.config,\r\n        signal: controller.signal,\r\n      })\r\n      clearTimeout(timeoutId)\r\n      // Check\r\n      if (!connSuccess?.success) throw new Error(connSuccess?.message)\r\n      return {\r\n        success: true,\r\n        responseTime: Math.round(performance.now() - startTime),\r\n      }\r\n    } catch (error) {\r\n      clearTimeout(timeoutId)\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Connection failed',\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel ongoing request\r\n   */\r\n  cancelRequest(): void {\r\n    if (this.abortController) {\r\n      this.abortController.abort()\r\n      this.abortController = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect from service\r\n   */\r\n  disconnect(): void {\r\n    this.cancelRequest()\r\n    this.connection.api = null\r\n    this.hasConnected = false\r\n  }\r\n\r\n  // Core Helper Methods //\r\n\r\n  /**\r\n   * Extract text from various response formats\r\n   * Handles multiple response types from different API endpoints\r\n   */\r\n  private extractTextFromResponse(response: any): string {\r\n    // Handle NonStreamPlayground format\r\n    if (response.text) {\r\n      return response.text\r\n    }\r\n\r\n    // Handle NonStreamChatbotResponse format\r\n    if (response.response) {\r\n      return response.response\r\n    }\r\n\r\n    // Handle GenericAPIResponse format\r\n    if (response.data && typeof response.data === 'string') {\r\n      return response.data\r\n    }\r\n\r\n    // Handle raw choices array\r\n    if (response.choices && Array.isArray(response.choices)) {\r\n      return (\r\n        response.choices[0]?.text || response.choices[0]?.message?.content || ''\r\n      )\r\n    }\r\n\r\n    // Fallback to string conversion\r\n    return String(response)\r\n  }\r\n\r\n  /**\r\n   * Unified streaming response handler for SSE (Server-Sent Events)\r\n   * Supports both simple text accumulation and advanced callback-based streaming\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams\r\n   * @param response - The Response object containing the stream\r\n   * @param options - Configuration options for handling the stream\r\n   * @param abortRef - Optional external AbortController to cancel the stream (separate from class's abortController)\r\n   */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    options?: {\r\n      onData?: (str: string) => void | Promise<void>\r\n      onFinish?: () => void | Promise<void>\r\n      onEvent?: (str: string) => void | Promise<void>\r\n      onComment?: (str: string) => void | Promise<void>\r\n      extractText?: boolean // If true, accumulate and return text\r\n    },\r\n    abortRef?: AbortController | null\r\n  ): Promise<string> {\r\n    const reader = response.body?.getReader()\r\n    if (!reader) {\r\n      throw new Error('No reader available for streaming response')\r\n    }\r\n\r\n    const decoder = new TextDecoder('utf-8')\r\n    let fullText = ''\r\n    const extractText = options?.extractText ?? true\r\n\r\n    try {\r\n      let readingBuffer = await reader.read()\r\n\r\n      // Check both external abortRef (if provided) and internal abortController\r\n      while (!readingBuffer.done && !abortRef?.signal.aborted) {\r\n        try {\r\n          const chunk =\r\n            typeof readingBuffer.value === 'string'\r\n              ? readingBuffer.value\r\n              : decoder.decode(readingBuffer.value, { stream: true })\r\n\r\n          const lines = chunk.split('\\n')\r\n\r\n          for (const line of lines) {\r\n            // Handle SSE comments\r\n            if (line?.startsWith(SSE_COMMENT_PREFIX)) {\r\n              const comment = line.slice(SSE_COMMENT_PREFIX.length).trim()\r\n              await options?.onComment?.(comment)\r\n            }\r\n\r\n            // Handle SSE events\r\n            if (line?.startsWith(SSE_EVENT_PREFIX)) {\r\n              const eventName = line.slice(SSE_EVENT_PREFIX.length).trim()\r\n              await options?.onEvent?.(eventName)\r\n            }\r\n\r\n            // Handle SSE data\r\n            if (line?.startsWith(SSE_DATA_PREFIX)) {\r\n              const eventData = line.slice(SSE_DATA_PREFIX.length).trim()\r\n\r\n              // Check for stream completion marker\r\n              if (eventData === '[DONE]') {\r\n                break\r\n              }\r\n\r\n              // Call onData callback if provided\r\n              await options?.onData?.(eventData)\r\n\r\n              // Also accumulate text if extractText is enabled\r\n              if (extractText) {\r\n                try {\r\n                  const parsed = JSON.parse(eventData)\r\n                  fullText += this.extractTextFromResponse(parsed)\r\n                } catch {\r\n                  // If not JSON, treat as plain text\r\n                  fullText += eventData\r\n                }\r\n              }\r\n            }\r\n\r\n            // Support legacy \"data: \" format (without SSE prefix constant)\r\n            if (\r\n              !line.startsWith(SSE_DATA_PREFIX) &&\r\n              line.startsWith('data: ')\r\n            ) {\r\n              const data = line.slice(6)\r\n              if (data === '[DONE]') break\r\n\r\n              await options?.onData?.(data)\r\n\r\n              if (extractText) {\r\n                try {\r\n                  const parsed = JSON.parse(data)\r\n                  fullText += this.extractTextFromResponse(parsed)\r\n                } catch {\r\n                  fullText += data\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.log(`${LOG_PREFIX} Error reading stream data buffer: ${err}`)\r\n        }\r\n\r\n        readingBuffer = await reader.read()\r\n      }\r\n\r\n      // Cancel if not done (e.g., aborted)\r\n      if (!readingBuffer.done) {\r\n        await reader.cancel()\r\n      }\r\n    } finally {\r\n      reader.releaseLock()\r\n    }\r\n\r\n    // Call finish callback\r\n    await options?.onFinish?.()\r\n\r\n    return fullText\r\n  }\r\n\r\n  // Core API Methods //\r\n\r\n  /**\r\n   * Send a message and get AI response\r\n   * Handles both streaming and non-streaming responses\r\n   */\r\n  async sendMessage(\r\n    messages: Message[],\r\n    options?: Partial<I_InferenceGenerateOptions>,\r\n    setEventState?: (ev: string) => void\r\n  ): Promise<string> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    // Create new abort controller for this request\r\n    this.abortController = new AbortController()\r\n\r\n    try {\r\n      const response = await this.connection?.api?.textInference.generate({\r\n        body: {\r\n          messages,\r\n          ...options,\r\n        },\r\n        signal: this.abortController.signal,\r\n      })\r\n\r\n      // Handle possible errors\r\n      if (!response) throw new Error('No response from AI service')\r\n      // Check for error responses (only applies to object responses with success property)\r\n      if (\r\n        typeof response === 'object' &&\r\n        response !== null &&\r\n        'success' in response &&\r\n        response.success === false\r\n      ) {\r\n        throw new Error(`No response from AI service: ${response.message}`)\r\n      }\r\n\r\n      // Handle different response types\r\n      if (typeof response === 'string') {\r\n        return response\r\n      }\r\n\r\n      // Handle Response object (streaming)\r\n      // Check if it's a Response-like object with headers and body\r\n      if (\r\n        typeof response === 'object' &&\r\n        response !== null &&\r\n        'headers' in response &&\r\n        'body' in response\r\n      ) {\r\n        const httpResponse = response as Response\r\n        const contentType = httpResponse.headers.get('content-type')\r\n        if (contentType?.includes('event-stream')) {\r\n          // Handle streaming response\r\n          return await this.handleStreamResponse(\r\n            httpResponse,\r\n            {\r\n              onData: (res: string) => {\r\n                console.log(`onData:\\n${res}`)\r\n              },\r\n              onFinish: async () => {\r\n                console.log(`${LOG_PREFIX} stream finished!`)\r\n                return\r\n              },\r\n              onEvent: async (str: string) => {\r\n                this.onStreamEvent(str)\r\n                const displayEventStr = str.replace(/_/g, ' ') + '...'\r\n                if (str) setEventState?.(displayEventStr)\r\n              },\r\n              onComment: async (str: string) => {\r\n                console.log(`${LOG_PREFIX} onComment:\\n${str}`)\r\n                return\r\n              },\r\n              extractText: false, // Don't accumulate text, use callbacks instead\r\n            },\r\n            this.abortController\r\n          )\r\n        } else {\r\n          // Handle JSON response\r\n          const data = await httpResponse.json()\r\n          return this.extractTextFromResponse(data)\r\n        }\r\n      }\r\n\r\n      // Handle structured response objects\r\n      return this.extractTextFromResponse(response)\r\n    } catch (error) {\r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        throw new Error('Request was cancelled')\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle streaming events\r\n   */\r\n  onStreamEvent(eventName: string) {\r\n    switch (eventName) {\r\n      case 'FEEDING_PROMPT':\r\n        break\r\n      case 'GENERATING_TOKENS':\r\n        break\r\n      case 'GENERATING_CONTENT':\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    console.log(`${LOG_PREFIX} onStreamEvent ${eventName}`)\r\n  }\r\n\r\n  stopChat() {\r\n    this.abortController?.abort()\r\n    this.connection?.api?.textInference.stop()\r\n  }\r\n\r\n  /**\r\n   * Install/download a model from a repository\r\n   * @param repoId - The repository ID of the model to install (e.g., \"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\")\r\n   * @param filename - Optional specific filename to download from the repository\r\n   * @returns The download result message\r\n   * @throws Error if not connected or download fails\r\n   */\r\n  async installModel(repoId: string, filename?: string): Promise<string> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      // Note: Server expects snake_case parameters\r\n      const body: { repo_id: string; filename?: string } = { repo_id: repoId }\r\n      if (filename) {\r\n        body.filename = filename\r\n      }\r\n\r\n      const response = await this.connection?.api?.textInference.download({\r\n        body,\r\n      })\r\n\r\n      // Server returns {success: true, message: \"...\", data: null}\r\n      // Return the message field which contains the success info\r\n      if (response?.message) {\r\n        return response.message\r\n      }\r\n\r\n      // Fallback to data field if message is not available\r\n      if (response?.data) {\r\n        return response.data\r\n      }\r\n\r\n      throw new Error('No response data from model installation')\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to install model: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uninstall/delete a model from server\r\n   * @param repoId - The repository ID of the model to delete\r\n   * @param filename - The filename of the model to delete\r\n   * @throws Error if not connected or deletion fails\r\n   */\r\n  async uninstallModel(repoId: string, filename: string): Promise<void> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      await this.connection?.api?.textInference.delete({\r\n        body: {\r\n          repoId,\r\n          filename,\r\n        },\r\n      })\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to uninstall model: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a text model\r\n   * @param modelPath - The file path to the model\r\n   * @param modelId - The unique identifier for the model\r\n   * @throws Error if not connected or model loading fails\r\n   */\r\n  async loadModel({\r\n    modelPath,\r\n    modelId,\r\n    modelSettings,\r\n  }: {\r\n    modelPath: string\r\n    modelId: string\r\n    modelSettings: I_Text_Settings\r\n  }): Promise<void> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const results = await this.connection?.api?.textInference.load({\r\n        body: {\r\n          modelPath,\r\n          modelId,\r\n          init: {\r\n            ...modelSettings.performance,\r\n          },\r\n          call: {\r\n            ...modelSettings.response,\r\n          },\r\n          raw_input: false, // user can send manually formatted messages\r\n          responseMode: modelSettings.attention.response_mode,\r\n          toolUseMode: modelSettings.attention.tool_use_mode,\r\n          // toolSchemaType: modelSettings.tools.assigned\r\n          // messages?: [] || null\r\n        },\r\n      })\r\n      if (!results) throw new Error('No results for loaded model.')\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to load model: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unload the currently loaded text model\r\n   * @throws Error if not connected or unloading fails\r\n   */\r\n  async unloadModel(): Promise<void> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      await this.connection?.api?.textInference.unload()\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to unload model: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get currently loaded model info\r\n   * @returns The loaded model data, or null if no model is loaded\r\n   * @throws Error if not connected or request fails\r\n   */\r\n  async getLoadedModel() {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.textInference.model()\r\n      return response?.data || null\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to get loaded model: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get list of installed models\r\n   * @returns Array of installed models (empty array if none installed)\r\n   * @throws Error if not connected or request fails\r\n   */\r\n  async getInstalledModels(): Promise<T_InstalledTextModel[]> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.textInference.installed()\r\n      const result = response?.data\r\n      if (!result || result.length <= 0) throw new Error('No results.')\r\n      return result\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to get installed models: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save agent/bot configuration settings\r\n   * @param config - The agent configuration settings to save\r\n   * @returns Array of all saved agent configurations\r\n   * @throws Error if not connected or save fails\r\n   */\r\n  async saveAgentConfig(config: I_Text_Settings): Promise<I_Text_Settings[]> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.storage?.saveBotSettings({\r\n        body: config,\r\n      })\r\n      return response?.data || []\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to save agent config: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the agent/bot configuration settings\r\n   * @param botName - Bot name to filter configurations\r\n   * @returns Array of agent configurations (empty array if none found)\r\n   * @throws Error if not connected or load fails\r\n   */\r\n  async getAgentConfig(botName: string): Promise<I_Text_Settings | null> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.storage?.getBotSettings({\r\n        ...(botName && { queryParams: { botName } }),\r\n      })\r\n      const config = response?.data?.find(c => c.model.botName === botName)\r\n      return config || null\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to get agent config: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete agent/bot configuration settings\r\n   * @param botName - The bot name to delete\r\n   * @returns Array of remaining agent configurations\r\n   * @throws Error if not connected or deletion fails\r\n   */\r\n  async deleteAgentConfig(botName: string): Promise<I_Text_Settings[]> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.storage?.deleteBotSettings({\r\n        queryParams: { botName },\r\n      })\r\n      return response?.data || []\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to delete agent config: ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get hardware information (GPU details, VRAM, etc.)\r\n   * @returns Array of hardware information (empty array if no hardware found)\r\n   * @throws Error if not connected or audit fails\r\n   */\r\n  async auditHardware(): Promise<I_HardwareInfo[]> {\r\n    if (!this.isConnected()) {\r\n      throw new Error('Not connected to Obrew service')\r\n    }\r\n\r\n    try {\r\n      const response = await this.connection?.api?.textInference.auditHardware()\r\n      const results = response?.data || []\r\n      console.log(`${LOG_PREFIX} Hardware audit result:`, results)\r\n      return results\r\n    } catch (error) {\r\n      const message =\r\n        error instanceof Error ? error.message : 'Unknown error occurred'\r\n      throw new Error(`Failed to audit hardware: ${message}`)\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const obrewClient = new ObrewClient()\r\n","/**\r\n * Type definitions for Obrew API\r\n * @module types\r\n */\r\n\r\n// ============================================================================\r\n// Message & Thread Types\r\n// ============================================================================\r\n\r\nexport type Message = {\r\n  id: string\r\n  createdAt?: Date | undefined\r\n  content: string\r\n  role: 'system' | 'user' | 'assistant'\r\n}\r\n\r\nexport interface I_Message {\r\n  id: string\r\n  content: string\r\n  role: 'system' | 'user' | 'assistant'\r\n  createdAt?: string\r\n  modelId?: string // for assistant msg\r\n  username?: string // for user msg\r\n}\r\n\r\nexport interface I_Thread {\r\n  id: string\r\n  userId: string\r\n  createdAt: string\r\n  title: string\r\n  summary: string\r\n  numMessages: number\r\n  messages: Array<I_Message>\r\n  sharePath?: string\r\n}\r\n\r\n// ============================================================================\r\n// Model Types\r\n// ============================================================================\r\n\r\nexport enum ModelID {\r\n  GPT3 = 'gpt3.5',\r\n  GPT4 = 'gpt4',\r\n  GPTNeo = 'gpt-neoxt-20B', // together/\r\n  Cohere = 'xlarge', // cohere/\r\n  Local = 'local', // 3rd party, local server\r\n}\r\n\r\nexport type T_ModelConfig = {\r\n  repoId: string\r\n  name: string\r\n  description?: string\r\n  messageFormat?: string\r\n}\r\n\r\nexport interface I_ModelConfigs {\r\n  [key: string]: T_ModelConfig\r\n}\r\n\r\nexport type T_InstalledTextModel = {\r\n  repoId: string\r\n  savePath: { [key: string]: string }\r\n  numTimesRun: number\r\n  isFavorited: boolean\r\n  validation: string\r\n  modified: string\r\n  size: number\r\n  endChunk: number\r\n  progress: number\r\n  tokenizerPath: string\r\n  checksum: string\r\n}\r\n\r\n// ============================================================================\r\n// LLM Configuration Types\r\n// ============================================================================\r\n\r\nexport interface I_LLM_Init_Options {\r\n  n_gpu_layers?: number\r\n  use_mlock?: boolean\r\n  seed?: number\r\n  n_ctx?: number\r\n  n_batch?: number\r\n  n_threads?: number\r\n  offload_kqv?: boolean\r\n  cache_type_k?: string\r\n  cache_type_v?: string\r\n  verbose?: boolean\r\n}\r\n\r\nexport interface I_Response_State {\r\n  temperature?: number\r\n  max_tokens?: number\r\n  top_p?: number\r\n  echo?: boolean\r\n  stop?: string\r\n  repeat_penalty?: number\r\n  top_k?: number\r\n  stream?: boolean\r\n  min_p?: number\r\n  presence_penalty?: number // 1.0\r\n  frequency_penalty?: number // 1.0\r\n  tfs_z?: number\r\n  mirostat_tau?: number\r\n  grammar?: string\r\n}\r\n\r\nexport interface I_LLM_Call_Options extends I_Response_State {\r\n  prompt?: string\r\n  messages?: Message[]\r\n  suffix?: string\r\n  model?: ModelID\r\n  promptTemplate?: string\r\n  systemMessage?: string\r\n  response_mode?: string\r\n}\r\n\r\nexport interface I_LLM_Options {\r\n  init?: I_LLM_Init_Options\r\n  call?: I_LLM_Call_Options\r\n}\r\n\r\n// ============================================================================\r\n// Conversation & Inference Types\r\n// ============================================================================\r\n\r\nexport const DEFAULT_CONVERSATION_MODE = 'instruct'\r\nexport const DEFAULT_TOOL_RESPONSE_MODE = 'answer'\r\nexport const BASE_RETRIEVAL_METHOD = 'base'\r\nexport const AUGMENTED_RETRIEVAL_METHOD = 'augmented'\r\nexport const AGENT_RETRIEVAL_METHOD = 'agent'\r\nexport const DEFAULT_RETRIEVAL_METHOD = BASE_RETRIEVAL_METHOD\r\nexport const NATIVE_TOOL_USE = 'native'\r\nexport const UNIVERSAL_TOOL_USE = 'universal'\r\nexport const DEFAULT_TOOL_USE_MODE = UNIVERSAL_TOOL_USE\r\n\r\nexport type T_ConversationMode = 'instruct' | 'chat' | 'collab'\r\nexport type T_ToolResponseMode = 'answer' | 'result'\r\nexport type T_ToolUseMode = typeof UNIVERSAL_TOOL_USE | typeof NATIVE_TOOL_USE\r\nexport type T_ToolSchemaType = 'json' | 'typescript'\r\n\r\nexport interface I_InferenceGenerateOptions extends T_LLM_InferenceOptions {\r\n  responseMode?: T_ConversationMode\r\n  toolResponseMode?: T_ToolResponseMode\r\n  toolUseMode?: T_ToolUseMode\r\n  messageFormat?: string\r\n  memory?: I_Knowledge_State\r\n  tools?: string[]\r\n}\r\n\r\nexport type T_LLM_InferenceOptions = I_LLM_Call_Options & I_LLM_Init_Options\r\n\r\nexport interface I_LoadTextModelRequestPayload {\r\n  responseMode?: T_ConversationMode\r\n  toolUseMode?: T_ToolUseMode\r\n  toolSchemaType?: T_ToolSchemaType\r\n  messages?: Message[]\r\n  raw_input?: boolean\r\n  modelPath: string\r\n  modelId: string\r\n  init: I_LLM_Init_Options\r\n  call: I_LLM_Call_Options\r\n}\r\n\r\nexport interface I_LoadedModelRes {\r\n  modelId: string\r\n  modelName: string\r\n  responseMode: T_ConversationMode\r\n  modelSettings: I_LLM_Init_Options\r\n  generateSettings: I_LLM_Call_Options\r\n}\r\n\r\n// ============================================================================\r\n// Response Types\r\n// ============================================================================\r\n\r\nexport interface I_NonStreamChatbotResponse {\r\n  metadata: { [key: string]: { order: number; sourceId: string } }\r\n  response: string\r\n  source_nodes: Array<any>\r\n}\r\n\r\nexport interface I_NonStreamPlayground {\r\n  additional_kwargs: any\r\n  raw: {\r\n    choices: Array<any>\r\n    created: number\r\n    id: string\r\n    model: string\r\n    object: string\r\n    usage: {\r\n      completion_tokens: number\r\n      prompt_tokens: number\r\n      total_tokens: number\r\n    }\r\n  }\r\n  delta: number | null\r\n  logprobs: any\r\n  text: string\r\n}\r\n\r\nexport interface I_GenericAPIResponse<DataResType> {\r\n  success: boolean\r\n  message: string\r\n  data: DataResType\r\n}\r\n\r\n// ============================================================================\r\n// Request Types\r\n// ============================================================================\r\n\r\nexport type T_GenericDataRes = any\r\nexport type T_GenericReqPayload = { [key: string]: any }\r\n\r\nexport interface I_GenericAPIRequestParams<Payload> {\r\n  queryParams?: Payload\r\n  formData?: FormData\r\n  body?: Payload\r\n  signal?: AbortSignal\r\n}\r\n\r\nexport type T_GenericAPIRequest<ReqPayload, DataResType> = (\r\n  props?: I_GenericAPIRequestParams<ReqPayload>\r\n) => Promise<I_GenericAPIResponse<DataResType> | null>\r\n\r\nexport type T_SaveChatThreadAPIRequest = (props: {\r\n  body: {\r\n    threadId: string\r\n    thread: I_Thread\r\n  }\r\n}) => Promise<I_GenericAPIResponse<T_GenericDataRes>>\r\n\r\nexport type T_GetChatThreadAPIRequest = (props: {\r\n  queryParams: {\r\n    threadId?: string | null\r\n  }\r\n}) => Promise<I_GenericAPIResponse<I_Thread[]>>\r\n\r\nexport type T_DeleteChatThreadAPIRequest = (props: {\r\n  queryParams: {\r\n    threadId?: string | null\r\n  }\r\n}) => Promise<I_GenericAPIResponse<I_Thread[]>>\r\n\r\n// ============================================================================\r\n// Knowledge & Memory Types\r\n// ============================================================================\r\n\r\nexport interface I_Knowledge_State {\r\n  ids: string[] // collection names\r\n}\r\n\r\nexport interface I_RAG_Strat_State {\r\n  similarity_top_k: number\r\n  response_mode: string | undefined\r\n}\r\n\r\nexport interface I_ChunkMetadata {\r\n  _node_type: string\r\n  _node_content: any\r\n  sourceId: string\r\n  ref_doc_id: string\r\n  order: number\r\n}\r\n\r\nexport interface I_Source {\r\n  id: string\r\n  document_name: string\r\n  embedding_model: string\r\n  checksum: string\r\n  urlPath: string\r\n  source_file_name: string\r\n  source_file_path: string\r\n  file_path: string\r\n  file_type: string\r\n  file_name: string\r\n  file_size: number\r\n  modified_last: string\r\n  created_at: string\r\n  description: string\r\n  tags: string\r\n  chunkIds: Array<string>\r\n}\r\n\r\nexport interface I_DocumentChunk {\r\n  text: string\r\n  id: string\r\n  metadata: I_ChunkMetadata\r\n}\r\n\r\nexport interface I_Collection {\r\n  id: string\r\n  name: string\r\n  metadata: {\r\n    description: string\r\n    embedding_model: string\r\n    tags: string\r\n    icon: string\r\n    sources: Array<I_Source>\r\n    created_at?: string\r\n    sharePath?: string\r\n    favorites?: number\r\n    createdAt?: string\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// Tool Types\r\n// ============================================================================\r\n\r\nexport type T_InputOptionTypes =\r\n  | 'options-sel'\r\n  | 'options-multi'\r\n  | 'options-button'\r\n  | 'text'\r\n  | 'text-multi'\r\n\r\nexport type T_Tool_Param_Option = string[] | number[]\r\n\r\nexport interface I_Tool_Parameter {\r\n  name: string\r\n  title: string\r\n  description: string\r\n  type: string\r\n  placeholder?: string\r\n  input_type?: T_InputOptionTypes\r\n  default_value?: any\r\n  value?: any\r\n  min_value?: string | number\r\n  max_value?: string | number\r\n  options_source?: string\r\n  options_description?: string[]\r\n  options?: string[]\r\n  items?: any[]\r\n}\r\n\r\nexport interface I_Tool_Def_Parameter extends I_Tool_Parameter {\r\n  value?: any\r\n}\r\n\r\nexport interface I_ToolFunctionSchemaRes {\r\n  params: I_Tool_Parameter[]\r\n  description?: string | undefined\r\n  params_schema?: any | undefined\r\n  params_example?: any | undefined\r\n  output_type?: string[]\r\n  json_schema?: string | undefined\r\n  typescript_schema?: string | undefined\r\n}\r\n\r\nexport interface I_Tool_Definition extends I_ToolFunctionSchemaRes {\r\n  name: string\r\n  path: string\r\n  id?: string | undefined // assigned on tool save\r\n}\r\n\r\n// ============================================================================\r\n// Settings Types\r\n// ============================================================================\r\n\r\nexport type T_PromptTemplate = {\r\n  id: string\r\n  name: string\r\n  text: string\r\n}\r\n\r\nexport type T_SystemPrompt = {\r\n  id: string\r\n  name: string\r\n  text: string\r\n}\r\n\r\nexport interface I_PromptTemplates {\r\n  [key: string]: T_PromptTemplate[]\r\n}\r\n\r\nexport type T_SystemPrompts = {\r\n  presets: { [key: string]: T_SystemPrompt[] }\r\n}\r\n\r\nexport type I_Prompt_State = {\r\n  promptTemplate: T_PromptTemplate\r\n}\r\n\r\nexport interface I_Model_State {\r\n  id: string | undefined\r\n  botName?: string\r\n  filename: string | undefined\r\n}\r\n\r\nexport interface I_System_State {\r\n  systemMessage: string | undefined\r\n  systemMessageName: string | undefined\r\n}\r\n\r\nexport interface I_Attention_State {\r\n  tool_use_mode: T_ToolUseMode\r\n  tool_response_mode: T_ToolResponseMode\r\n  response_mode: T_ConversationMode\r\n}\r\n\r\nexport interface I_Tools_Inference_State {\r\n  assigned: string[]\r\n}\r\n\r\nexport interface I_Text_Settings {\r\n  tools: I_Tools_Inference_State\r\n  attention: I_Attention_State\r\n  performance: I_LLM_Init_Options\r\n  system: I_System_State\r\n  model: I_Model_State\r\n  prompt: I_Prompt_State\r\n  response: I_Response_State\r\n  memory: I_Knowledge_State\r\n}\r\n\r\n// ============================================================================\r\n// API Configuration Types\r\n// ============================================================================\r\n\r\nexport interface I_ConnectionConfig {\r\n  domain: string\r\n  port: string\r\n  version: string\r\n  enabled: boolean\r\n}\r\n\r\nexport interface I_Connection {\r\n  config: I_ConnectionConfig\r\n  api: I_ServiceApis | null\r\n}\r\n\r\nexport type T_APIConfigOptions = {\r\n  chunkingStrategies?: Array<string>\r\n  domain?: string\r\n  port?: string\r\n}\r\n\r\nexport interface I_Endpoint {\r\n  name: string\r\n  urlPath: string\r\n  method: string\r\n}\r\n\r\nexport interface I_API {\r\n  name: string\r\n  port: number\r\n  endpoints: Array<I_Endpoint>\r\n  configs?: T_APIConfigOptions\r\n}\r\n\r\nexport interface I_ServicesResponse {\r\n  success: boolean\r\n  message: string\r\n  data: Array<I_API>\r\n}\r\n\r\nexport interface I_ConnectResponse {\r\n  success: boolean\r\n  message: string\r\n  data: { docs: string }\r\n}\r\n\r\n// ============================================================================\r\n// Hardware Types\r\n// ============================================================================\r\n\r\nexport interface I_HardwareInfo {\r\n  gpu_type: string\r\n  gpu_name: string\r\n  driver_ver: string\r\n  manufacturer: string\r\n  dac_type: string\r\n  pnp_device_id: string\r\n  id?: number\r\n  vram_total?: number\r\n  vram_used?: number\r\n  vram_free?: number\r\n}\r\n\r\nexport interface I_HardwareAuditResponse {\r\n  success: boolean\r\n  message: string\r\n  data: I_HardwareInfo[]\r\n}\r\n\r\n// ============================================================================\r\n// Service API Types\r\n// ============================================================================\r\n\r\nexport type T_Endpoint = { [key: string]: any }\r\n\r\nexport interface I_BaseServiceApis {\r\n  [key: string]: T_Endpoint\r\n}\r\n\r\nexport type T_TextInferenceAPIRequest = (props: {\r\n  body: I_InferenceGenerateOptions\r\n  signal: AbortSignal\r\n}) => Promise<\r\n  | Response\r\n  | I_NonStreamPlayground\r\n  | I_NonStreamChatbotResponse\r\n  | string // a JSON string\r\n  | I_GenericAPIResponse<any>\r\n  | null\r\n>\r\n\r\nexport interface I_DeleteTextModelReqPayload {\r\n  repoId: string\r\n  filename: string\r\n}\r\n\r\nexport interface I_ToolSchemaReqPayload {\r\n  filename: string\r\n  tool_name?: string\r\n}\r\n\r\nexport interface I_ServiceApis extends I_BaseServiceApis {\r\n  /**\r\n   * Use to query the text inference engine\r\n   */\r\n  textInference: {\r\n    generate: T_TextInferenceAPIRequest\r\n    stop: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    load: T_GenericAPIRequest<\r\n      I_LoadTextModelRequestPayload,\r\n      I_GenericAPIResponse<undefined>\r\n    >\r\n    unload: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    model: T_GenericAPIRequest<T_GenericReqPayload, I_LoadedModelRes> // Currently loaded text model\r\n    modelExplore: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    installed: T_GenericAPIRequest<T_GenericReqPayload, T_InstalledTextModel[]> // List of currently installed text models\r\n    getModelMetadata: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    getModelInfo: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    download: T_GenericAPIRequest<T_GenericReqPayload, string>\r\n    delete: T_GenericAPIRequest<I_DeleteTextModelReqPayload, T_GenericDataRes>\r\n    getModelConfigs: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    auditHardware: T_GenericAPIRequest<T_GenericReqPayload, I_HardwareInfo[]>\r\n    // getPromptTemplates: T_GenericAPIRequest<\r\n    //   T_GenericReqPayload,\r\n    //   T_GenericDataRes\r\n    // >;\r\n    // getSystemPrompts: T_GenericAPIRequest<\r\n    //   T_GenericReqPayload,\r\n    //   T_GenericDataRes\r\n    // >;\r\n  }\r\n  /**\r\n   * Use to add/create/update/delete embeddings from database\r\n   */\r\n  memory: {\r\n    addDocument: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    getChunks: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    updateDocument: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    deleteDocuments: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    getAllCollections: T_GenericAPIRequest<\r\n      T_GenericReqPayload,\r\n      T_GenericDataRes\r\n    >\r\n    addCollection: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    getCollection: T_GenericAPIRequest<T_GenericReqPayload, I_Collection>\r\n    deleteCollection: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    fileExplore: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    wipe: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    configs: {\r\n      chunkingStrategies: Array<string>\r\n    }\r\n  }\r\n  /**\r\n   * Use to persist data specific to the app itself\r\n   */\r\n  storage: {\r\n    getToolSchema: T_GenericAPIRequest<\r\n      I_ToolSchemaReqPayload,\r\n      I_ToolFunctionSchemaRes\r\n    >\r\n    getToolFunctions: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>\r\n    saveToolSettings?: T_GenericAPIRequest<T_GenericReqPayload, null>\r\n    getToolSettings?: T_GenericAPIRequest<\r\n      T_GenericReqPayload,\r\n      I_Tool_Definition[]\r\n    >\r\n    deleteToolSettings?: T_GenericAPIRequest<T_GenericReqPayload, null>\r\n    getBotSettings: T_GenericAPIRequest<T_GenericReqPayload, I_Text_Settings[]>\r\n    deleteBotSettings: T_GenericAPIRequest<\r\n      T_GenericReqPayload,\r\n      I_Text_Settings[]\r\n    >\r\n    saveBotSettings: T_GenericAPIRequest<T_GenericReqPayload, I_Text_Settings[]>\r\n    saveChatThread: T_SaveChatThreadAPIRequest\r\n    getChatThread: T_GetChatThreadAPIRequest\r\n    deleteChatThread: T_DeleteChatThreadAPIRequest\r\n  }\r\n}\r\n"]}