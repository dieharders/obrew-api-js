{"version":3,"sources":["../src/utils.ts","../src/api.ts","../src/hooks.ts","../src/types.ts"],"names":["useCallback","ModelID"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Utility functions for Obrew API\n * @module utils\n */\n\nconst CONNECTION_KEY = \"remote_host\";\n\n/**\n * Configuration for remote host connection\n */\nexport interface HostConnection {\n  domain?: string;\n  port?: string;\n}\n\n/**\n * Retrieve the stored host connection configuration from localStorage\n * @TODO May embed this in consuming app\n * @returns The stored host connection configuration or an empty object\n */\nexport const getHostConnection = (): HostConnection => {\n  if (typeof localStorage === \"undefined\") return {};\n\n  const data = localStorage.getItem(CONNECTION_KEY);\n  const config = data ? JSON.parse(data) : {};\n  return config;\n};\n\n/**\n * Store the host connection configuration in localStorage\n * @TODO May embed this in consuming app\n * @param newConnection - The new connection configuration to store\n */\nexport const setHostConnection = (newConnection: HostConnection): void => {\n  if (typeof localStorage === \"undefined\") return;\n\n  const setting = JSON.stringify(newConnection);\n  localStorage.setItem(CONNECTION_KEY, setting);\n};\n\n/**\n * Default port for Obrew API\n */\nexport const defaultPort = \"8008\";\n\n/**\n * Default domain for Obrew API\n */\nexport const defaultDomain = \"http://localhost\";\n\n/**\n * Create a fully qualified domain name from stored connection settings\n * @TODO May embed this in consuming app\n * @returns The complete origin URL (e.g., \"http://localhost:8008\")\n */\nexport const createDomainName = (): string => {\n  const { port, domain } = getHostConnection();\n  const PORT = port || defaultPort;\n  const DOMAIN = domain === \"0.0.0.0\" ? defaultDomain : domain || defaultDomain;\n  const origin = `${DOMAIN}:${PORT}`;\n  return origin;\n};\n","/**\n * Core API client for Obrew backend services\n * @module api\n */\n\nimport { createDomainName } from \"./utils\";\nimport type {\n  I_API,\n  I_ConnectResponse,\n  I_ServicesResponse,\n  I_ServiceApis,\n  I_GenericAPIRequestParams,\n  T_GenericReqPayload,\n  T_APIConfigOptions,\n} from \"./types\";\n\n/**\n * Connect to the Obrew backend server\n * @returns A promise that resolves with connection info or null on failure\n */\nexport const fetchConnect = async (): Promise<I_ConnectResponse | null> => {\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const domain = createDomainName();\n    const res = await fetch(`${domain}/v1/connect`, options);\n    if (!res.ok) throw new Error(`[obrew] HTTP error! Status: ${res.status}`);\n    if (!res) throw new Error(\"[obrew] No response received.\");\n    return res.json();\n  } catch (err) {\n    console.error(\"[obrew] connectToServer error:\", err);\n    return null;\n  }\n};\n\n/**\n * Fetch the API configuration from the backend\n * @returns A promise that resolves with the API configuration or null on failure\n */\nexport const fetchAPIConfig = async (): Promise<I_ServicesResponse | null> => {\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const endpoint = \"/v1/services/api\";\n    const domain = createDomainName();\n    const res = await fetch(`${domain}${endpoint}`, options);\n    if (!res.ok) throw new Error(`[obrew] HTTP error! Status: ${res.status}`);\n    if (!res) throw new Error(`[obrew] No response from ${endpoint}`);\n    return res.json();\n  } catch (err) {\n    console.error(\"[obrew] fetchAPIConfig error:\", err);\n    return null;\n  }\n};\n\n/**\n * Create service API clients from backend configuration\n * @param response - The API configuration from the backend\n * @returns Service API clients or null if configuration is invalid\n */\nexport const createServices = (\n  response: I_API[] | null\n): I_ServiceApis | null => {\n  if (!response || response.length === 0) return null;\n\n  const serviceApis = {} as I_ServiceApis;\n\n  // Construct api funcs for each service\n  response.forEach((api) => {\n    const origin = `${createDomainName()}`;\n    const apiName = api.name;\n    const endpoints: {\n      [key: string]: (args: any) => Promise<Response | null>;\n    } & {\n      configs?: T_APIConfigOptions;\n    } = {};\n    let res: Response;\n\n    // Parse endpoint urls\n    api.endpoints.forEach((endpoint) => {\n      // Create a curried fetch function\n      const request = async (\n        args: I_GenericAPIRequestParams<T_GenericReqPayload>\n      ) => {\n        try {\n          const contentType = { \"Content-Type\": \"application/json\" };\n          const method = endpoint.method;\n          const headers = {\n            ...(method === \"POST\" && !args?.formData && contentType),\n          };\n          const body = args?.formData\n            ? args.formData\n            : JSON.stringify(args?.body);\n          const signal = args?.signal;\n          const queryParams = args?.queryParams\n            ? new URLSearchParams(args?.queryParams).toString()\n            : null;\n          const queryUrl = queryParams ? `?${queryParams}` : \"\";\n          const url = `${origin}${endpoint.urlPath}${queryUrl}`;\n\n          res = await fetch(url, {\n            method,\n            mode: \"cors\", // no-cors, *, cors, same-origin\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers, // { 'Content-Type': 'multipart/form-data' }, // Browser will set this automatically for us for \"formData\"\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body,\n            ...(signal && { signal }),\n          });\n\n          // Check no response\n          if (!res)\n            throw new Error(`No response for endpoint ${endpoint.name}.`);\n\n          // Check bad request\n          if (!res?.ok)\n            throw new Error(`Something went wrong. ${res?.statusText}`);\n\n          // Check json response\n          const responseType = res.headers.get(\"content-type\");\n          if (res.json && !responseType?.includes(\"event-stream\")) {\n            const result = await res.json();\n\n            if (!result) throw new Error(\"Something went wrong\");\n            // Check failure from obrew api\n            if (typeof result?.success === \"boolean\" && !result?.success)\n              throw new Error(\n                `An unexpected error occurred for [${\n                  endpoint.name\n                }] endpoint: ${result?.message ?? result?.detail}`\n              );\n            // Success\n            return result;\n          }\n          // Return raw response (for streaming)\n          return res;\n        } catch (err) {\n          console.error(`[obrew] Endpoint \"${endpoint.name}\":`, err);\n          return { success: false, message: err };\n        }\n      };\n\n      // Add request function for this endpoint\n      endpoints[endpoint.name] = request;\n      // Set api configs\n      endpoints.configs = api.configs || {};\n    });\n    // Set api callbacks\n    serviceApis[apiName] = endpoints;\n  });\n\n  return serviceApis;\n};\n\n/**\n * Connect to the local Obrew provider\n * @returns A promise that resolves with connection info or null on failure\n */\nexport const connectToLocalProvider =\n  async (): Promise<I_ConnectResponse | null> => {\n    const conn = await fetchConnect();\n    console.log(\"[obrew] Connecting:\", conn);\n\n    const connected = conn?.success;\n    if (!connected) return null;\n\n    console.log(`[obrew] Connected to local ai engine: ${conn.message}`);\n    return conn;\n  };\n\n/**\n * Get the API configuration from the backend\n * @returns A promise that resolves with the API array or null on failure\n */\nexport const getAPIConfig = async () => {\n  const config = await fetchAPIConfig();\n  console.log(\"[obrew] getAPIConfig:\", config);\n\n  const success = config?.success;\n  if (!success) return null;\n\n  const apis = config.data;\n  return apis;\n};\n","/**\n * React hooks for Obrew API\n * @module hooks\n */\n\nimport { useCallback } from \"react\";\nimport { getAPIConfig, createServices, connectToLocalProvider } from \"./api\";\nimport type {\n  I_ServiceApis,\n  I_ConnectResponse,\n  T_APIConfigOptions,\n} from \"./types\";\n\n/**\n * Service APIs with configuration options\n */\nexport interface ServicesWithConfig {\n  serviceApis: I_ServiceApis | null;\n  configOptions: T_APIConfigOptions;\n}\n\n/**\n * Hook for Obrew API that handles state and connections\n * @returns Object containing connect and getServices methods\n *\n * @example\n * ```tsx\n * import { useObrew } from 'obrew-api-js'\n *\n * function MyComponent() {\n *   const { connect, getServices } = useObrew()\n *\n *   useEffect(() => {\n *     async function init() {\n *       const connection = await connect()\n *       if (connection?.success) {\n *         const services = await getServices()\n *         // Use services.textInference, services.memory, etc.\n *       }\n *     }\n *     init()\n *   }, [connect, getServices])\n *\n *   return <div>My App</div>\n * }\n * ```\n */\nexport const useObrew = () => {\n  /**\n   * Get all API configs for services\n   * @returns Service APIs with their configuration options\n   */\n  const getServices = useCallback(async (): Promise<ServicesWithConfig> => {\n    const res = await getAPIConfig();\n\n    // Store all config options for endpoints\n    let configOptions: T_APIConfigOptions = {};\n    res?.forEach((i) => {\n      if (i.configs) configOptions = { ...configOptions, ...i.configs };\n    });\n\n    // Return readily usable request funcs\n    const serviceApis = createServices(res);\n\n    return { serviceApis, configOptions };\n  }, []);\n\n  /**\n   * Attempt to connect to Obrew API\n   * @returns Connection result or null on failure\n   */\n  const connect = useCallback(async (): Promise<I_ConnectResponse | null> => {\n    const result = await connectToLocalProvider();\n    if (!result?.success) return null;\n\n    // Attempt to return api services\n    await getServices();\n\n    return result;\n  }, [getServices]);\n\n  return {\n    connect,\n    getServices,\n  };\n};\n\n/**\n * @deprecated Use useObrew instead. This is kept for backwards compatibility.\n */\nexport const useHomebrew = useObrew;\n","/**\n * Type definitions for Obrew API\n * @module types\n */\n\n// ============================================================================\n// Message & Thread Types\n// ============================================================================\n\nexport type Message = {\n  id: string;\n  createdAt?: Date | undefined;\n  content: string;\n  role: \"system\" | \"user\" | \"assistant\";\n};\n\nexport interface I_Message {\n  id: string;\n  content: string;\n  role: \"system\" | \"user\" | \"assistant\";\n  createdAt?: string;\n  modelId?: string; // for assistant msg\n  username?: string; // for user msg\n}\n\nexport interface I_Thread {\n  id: string;\n  userId: string;\n  createdAt: string;\n  title: string;\n  summary: string;\n  numMessages: number;\n  messages: Array<I_Message>;\n  sharePath?: string;\n}\n\n// ============================================================================\n// Model Types\n// ============================================================================\n\nexport enum ModelID {\n  GPT3 = \"gpt3.5\",\n  GPT4 = \"gpt4\",\n  GPTNeo = \"gpt-neoxt-20B\", // together/\n  Cohere = \"xlarge\", // cohere/\n  Local = \"local\", // 3rd party, local server\n}\n\nexport type T_ModelConfig = {\n  repoId: string;\n  name: string;\n  description?: string;\n  messageFormat?: string;\n};\n\nexport interface I_ModelConfigs {\n  [key: string]: T_ModelConfig;\n}\n\nexport type T_InstalledTextModel = {\n  repoId: string;\n  savePath: { [key: string]: string };\n  numTimesRun: number;\n  isFavorited: boolean;\n  validation: string;\n  modified: string;\n  size: number;\n  endChunk: number;\n  progress: number;\n  tokenizerPath: string;\n  checksum: string;\n};\n\n// ============================================================================\n// LLM Configuration Types\n// ============================================================================\n\nexport interface I_LLM_Init_Options {\n  n_gpu_layers?: number;\n  use_mlock?: boolean;\n  seed?: number;\n  n_ctx?: number;\n  n_batch?: number;\n  n_threads?: number;\n  offload_kqv?: boolean;\n  cache_type_k?: string;\n  cache_type_v?: string;\n  verbose?: boolean;\n}\n\nexport interface I_Response_State {\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  echo?: boolean;\n  stop?: string;\n  repeat_penalty?: number;\n  top_k?: number;\n  stream?: boolean;\n  min_p?: number;\n  presence_penalty?: number; // 1.0\n  frequency_penalty?: number; // 1.0\n  tfs_z?: number;\n  mirostat_tau?: number;\n  grammar?: string;\n}\n\nexport interface I_LLM_Call_Options extends I_Response_State {\n  prompt?: string;\n  messages?: Message[];\n  suffix?: string;\n  model?: ModelID;\n  promptTemplate?: string;\n  systemMessage?: string;\n  response_mode?: string;\n}\n\nexport interface I_LLM_Options {\n  init?: I_LLM_Init_Options;\n  call?: I_LLM_Call_Options;\n}\n\n// ============================================================================\n// Conversation & Inference Types\n// ============================================================================\n\nexport const DEFAULT_CONVERSATION_MODE = \"instruct\";\nexport const DEFAULT_TOOL_RESPONSE_MODE = \"answer\";\nexport const BASE_RETRIEVAL_METHOD = \"base\";\nexport const AUGMENTED_RETRIEVAL_METHOD = \"augmented\";\nexport const AGENT_RETRIEVAL_METHOD = \"agent\";\nexport const DEFAULT_RETRIEVAL_METHOD = BASE_RETRIEVAL_METHOD;\nexport const NATIVE_TOOL_USE = \"native\";\nexport const UNIVERSAL_TOOL_USE = \"universal\";\nexport const DEFAULT_TOOL_USE_MODE = UNIVERSAL_TOOL_USE;\n\nexport type T_ConversationMode = \"instruct\" | \"chat\" | \"collab\";\nexport type T_ToolResponseMode = \"answer\" | \"result\";\nexport type T_ToolUseMode = typeof UNIVERSAL_TOOL_USE | typeof NATIVE_TOOL_USE;\nexport type T_ToolSchemaType = \"json\" | \"typescript\";\n\nexport interface I_InferenceGenerateOptions extends T_LLM_InferenceOptions {\n  responseMode?: T_ConversationMode;\n  toolResponseMode?: T_ToolResponseMode;\n  toolUseMode?: T_ToolUseMode;\n  messageFormat?: string;\n  memory?: I_Knowledge_State;\n  tools?: string[];\n}\n\nexport type T_LLM_InferenceOptions = I_LLM_Call_Options & I_LLM_Init_Options;\n\nexport interface I_LoadTextModelRequestPayload {\n  responseMode?: T_ConversationMode;\n  toolUseMode?: T_ToolUseMode;\n  toolSchemaType?: T_ToolSchemaType;\n  messages?: Message[];\n  raw_input?: boolean;\n  modelPath: string;\n  modelId: string;\n  init: I_LLM_Init_Options;\n  call: I_LLM_Call_Options;\n}\n\nexport interface I_LoadedModelRes {\n  modelId: string;\n  modelName: string;\n  responseMode: T_ConversationMode;\n  modelSettings: I_LLM_Init_Options;\n  generateSettings: I_LLM_Call_Options;\n}\n\n// ============================================================================\n// Response Types\n// ============================================================================\n\nexport interface I_NonStreamChatbotResponse {\n  metadata: { [key: string]: { order: number; sourceId: string } };\n  response: string;\n  source_nodes: Array<any>;\n}\n\nexport interface I_NonStreamPlayground {\n  additional_kwargs: any;\n  raw: {\n    choices: Array<any>;\n    created: number;\n    id: string;\n    model: string;\n    object: string;\n    usage: {\n      completion_tokens: number;\n      prompt_tokens: number;\n      total_tokens: number;\n    };\n  };\n  delta: number | null;\n  logprobs: any;\n  text: string;\n}\n\nexport interface I_GenericAPIResponse<DataResType> {\n  success: boolean;\n  message: string;\n  data: DataResType;\n}\n\n// ============================================================================\n// Request Types\n// ============================================================================\n\nexport type T_GenericDataRes = any;\nexport type T_GenericReqPayload = { [key: string]: any };\n\nexport interface I_GenericAPIRequestParams<Payload> {\n  queryParams?: Payload;\n  formData?: FormData;\n  body?: Payload;\n  signal?: AbortSignal;\n}\n\nexport type T_GenericAPIRequest<ReqPayload, DataResType> = (\n  props?: I_GenericAPIRequestParams<ReqPayload>\n) => Promise<I_GenericAPIResponse<DataResType> | null>;\n\nexport type T_SaveChatThreadAPIRequest = (props: {\n  body: {\n    threadId: string;\n    thread: I_Thread;\n  };\n}) => Promise<I_GenericAPIResponse<T_GenericDataRes>>;\n\nexport type T_GetChatThreadAPIRequest = (props: {\n  queryParams: {\n    threadId?: string | null;\n  };\n}) => Promise<I_GenericAPIResponse<I_Thread[]>>;\n\nexport type T_DeleteChatThreadAPIRequest = (props: {\n  queryParams: {\n    threadId?: string | null;\n  };\n}) => Promise<I_GenericAPIResponse<I_Thread[]>>;\n\n// ============================================================================\n// Knowledge & Memory Types\n// ============================================================================\n\nexport interface I_Knowledge_State {\n  ids: string[]; // collection names\n}\n\nexport interface I_RAG_Strat_State {\n  similarity_top_k: number;\n  response_mode: string | undefined;\n}\n\nexport interface I_ChunkMetadata {\n  _node_type: string;\n  _node_content: any;\n  sourceId: string;\n  ref_doc_id: string;\n  order: number;\n}\n\nexport interface I_Source {\n  id: string;\n  document_name: string;\n  embedding_model: string;\n  checksum: string;\n  urlPath: string;\n  source_file_name: string;\n  source_file_path: string;\n  file_path: string;\n  file_type: string;\n  file_name: string;\n  file_size: number;\n  modified_last: string;\n  created_at: string;\n  description: string;\n  tags: string;\n  chunkIds: Array<string>;\n}\n\nexport interface I_DocumentChunk {\n  text: string;\n  id: string;\n  metadata: I_ChunkMetadata;\n}\n\nexport interface I_Collection {\n  id: string;\n  name: string;\n  metadata: {\n    description: string;\n    embedding_model: string;\n    tags: string;\n    icon: string;\n    sources: Array<I_Source>;\n    created_at?: string;\n    sharePath?: string;\n    favorites?: number;\n    createdAt?: string;\n  };\n}\n\n// ============================================================================\n// Tool Types\n// ============================================================================\n\nexport type T_InputOptionTypes =\n  | \"options-sel\"\n  | \"options-multi\"\n  | \"options-button\"\n  | \"text\"\n  | \"text-multi\";\n\nexport type T_Tool_Param_Option = string[] | number[];\n\nexport interface I_Tool_Parameter {\n  name: string;\n  title: string;\n  description: string;\n  type: string;\n  placeholder?: string;\n  input_type?: T_InputOptionTypes;\n  default_value?: any;\n  value?: any;\n  min_value?: string | number;\n  max_value?: string | number;\n  options_source?: string;\n  options_description?: string[];\n  options?: string[];\n  items?: any[];\n}\n\nexport interface I_Tool_Def_Parameter extends I_Tool_Parameter {\n  value?: any;\n}\n\nexport interface I_ToolFunctionSchemaRes {\n  params: I_Tool_Parameter[];\n  description?: string | undefined;\n  params_schema?: any | undefined;\n  params_example?: any | undefined;\n  output_type?: string[];\n}\n\nexport interface I_Tool_Definition extends I_ToolFunctionSchemaRes {\n  name: string;\n  path: string;\n  id?: string | undefined; // assigned on tool save\n}\n\n// ============================================================================\n// Settings Types\n// ============================================================================\n\nexport type T_PromptTemplate = {\n  id: string;\n  name: string;\n  text: string;\n};\n\nexport type T_SystemPrompt = {\n  id: string;\n  name: string;\n  text: string;\n};\n\nexport interface I_PromptTemplates {\n  [key: string]: T_PromptTemplate[];\n}\n\nexport type T_SystemPrompts = {\n  presets: { [key: string]: T_SystemPrompt[] };\n};\n\nexport type I_Prompt_State = {\n  promptTemplate: T_PromptTemplate;\n};\n\nexport interface I_Model_State {\n  id: string | undefined;\n  botName?: string;\n  filename: string | undefined;\n}\n\nexport interface I_System_State {\n  systemMessage: string | undefined;\n  systemMessageName: string | undefined;\n}\n\nexport interface I_Attention_State {\n  tool_use_mode: T_ToolUseMode;\n  tool_response_mode: T_ToolResponseMode;\n  response_mode: T_ConversationMode;\n}\n\nexport interface I_Tools_Inference_State {\n  assigned: string[];\n}\n\nexport interface I_Text_Settings {\n  tools: I_Tools_Inference_State;\n  attention: I_Attention_State;\n  performance: I_LLM_Init_Options;\n  system: I_System_State;\n  model: I_Model_State;\n  prompt: I_Prompt_State;\n  response: I_Response_State;\n  memory: I_Knowledge_State;\n}\n\n// ============================================================================\n// API Configuration Types\n// ============================================================================\n\nexport type T_APIConfigOptions = {\n  chunkingStrategies?: Array<string>;\n  domain?: string;\n  port?: string;\n};\n\nexport interface I_Endpoint {\n  name: string;\n  urlPath: string;\n  method: string;\n}\n\nexport interface I_API {\n  name: string;\n  port: number;\n  endpoints: Array<I_Endpoint>;\n  configs?: T_APIConfigOptions;\n}\n\nexport interface I_ServicesResponse {\n  success: boolean;\n  message: string;\n  data: Array<I_API>;\n}\n\nexport interface I_ConnectResponse {\n  success: boolean;\n  message: string;\n  data: { docs: string };\n}\n\n// ============================================================================\n// Service API Types\n// ============================================================================\n\nexport type T_Endpoint = { [key: string]: any };\n\nexport interface I_BaseServiceApis {\n  [key: string]: T_Endpoint;\n}\n\nexport type T_TextInferenceAPIRequest = (props: {\n  body: I_InferenceGenerateOptions;\n  signal: AbortSignal;\n}) =>\n  | (Response &\n      I_NonStreamPlayground &\n      I_NonStreamChatbotResponse &\n      string & // a JSON string\n      I_GenericAPIResponse<any>)\n  | null;\n\nexport interface I_DeleteTextModelReqPayload {\n  repoId: string;\n  filename: string;\n}\n\nexport interface I_ToolSchemaReqPayload {\n  filename: string;\n}\n\nexport interface I_ServiceApis extends I_BaseServiceApis {\n  /**\n   * Use to query the text inference engine\n   */\n  textInference: {\n    generate: T_TextInferenceAPIRequest;\n    stop: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    load: T_GenericAPIRequest<\n      I_LoadTextModelRequestPayload,\n      I_GenericAPIResponse<undefined>\n    >;\n    unload: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    model: T_GenericAPIRequest<T_GenericReqPayload, I_LoadedModelRes>; // Currently loaded text model\n    modelExplore: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    installed: T_GenericAPIRequest<T_GenericReqPayload, T_InstalledTextModel[]>; // List of currently installed text models\n    getModelMetadata: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      T_GenericDataRes\n    >;\n    getModelInfo: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    download: T_GenericAPIRequest<T_GenericReqPayload, string>;\n    delete: T_GenericAPIRequest<I_DeleteTextModelReqPayload, T_GenericDataRes>;\n    getModelConfigs: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    // getPromptTemplates: T_GenericAPIRequest<\n    //   T_GenericReqPayload,\n    //   T_GenericDataRes\n    // >;\n    // getSystemPrompts: T_GenericAPIRequest<\n    //   T_GenericReqPayload,\n    //   T_GenericDataRes\n    // >;\n  };\n  /**\n   * Use to add/create/update/delete embeddings from database\n   */\n  memory: {\n    addDocument: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    getChunks: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    updateDocument: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    deleteDocuments: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    getAllCollections: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      T_GenericDataRes\n    >;\n    addCollection: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    getCollection: T_GenericAPIRequest<T_GenericReqPayload, I_Collection>;\n    deleteCollection: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      T_GenericDataRes\n    >;\n    fileExplore: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    wipe: T_GenericAPIRequest<T_GenericReqPayload, T_GenericDataRes>;\n    configs: {\n      chunkingStrategies: Array<string>;\n    };\n  };\n  /**\n   * Use to persist data specific to the app itself\n   */\n  storage: {\n    getToolSchema: T_GenericAPIRequest<\n      I_ToolSchemaReqPayload,\n      I_ToolFunctionSchemaRes\n    >;\n    getToolFunctions: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      T_GenericDataRes\n    >;\n    saveToolSettings?: T_GenericAPIRequest<T_GenericReqPayload, null>;\n    getToolSettings?: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      I_Tool_Definition[]\n    >;\n    deleteToolSettings?: T_GenericAPIRequest<T_GenericReqPayload, null>;\n    getBotSettings: T_GenericAPIRequest<T_GenericReqPayload, I_Text_Settings[]>;\n    deleteBotSettings: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      I_Text_Settings[]\n    >;\n    saveBotSettings: T_GenericAPIRequest<\n      T_GenericReqPayload,\n      I_Text_Settings[]\n    >;\n    saveChatThread: T_SaveChatThreadAPIRequest;\n    getChatThread: T_GetChatThreadAPIRequest;\n    deleteChatThread: T_DeleteChatThreadAPIRequest;\n  };\n}\n"]}